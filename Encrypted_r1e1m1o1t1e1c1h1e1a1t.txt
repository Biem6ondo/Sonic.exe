
local willget = game.CoreGui
local SG = Instance.new("ScreenGui", willget)
SG.Name = "sg123"
local wa = Instance.new("TextLabel", SG)
wa.Text = "*Added functionality to the button but it's still lacking"
wa.Name = "textr"
wa.Position = UDim2.new(0.5, 0, 0.8, 0)
wa.TextSize = 14
wa.TextColor3 = Color3.fromRGB(255, 0, 0)
wa.Visible = false
wa.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
wa.TextStrokeTransparency = 0

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "TD 1.31 (Updating...)",
   Icon = 0,
   LoadingTitle = "Wait...",
   LoadingSubtitle = "by ???",
   Theme = "Ocean"
})
local Tab = Window:CreateTab("Main", 0)
local Dropdown = Tab:CreateDropdown({
   Name = "Emotes",
   Options = {"angry", "glad", "surprised", "sad", "happy", "worried", "confused", "tired", "enraged", "hurt"},
   CurrentOption = {"Choose Emote"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Options)
       if Options[1] ~= "none" then
           local args = {
               [1] = Options[1]
           }
           game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("expressions"):FireServer(unpack(args))
       end
   end,
})
local Dropdown = Tab:CreateDropdown({
   Name = "Eyes",
   Options = {"bloodshot", "regularEyes", "removeBloodshot", "scaredEyes"},
   CurrentOption = {"Choose Eyes"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Options)
       if Options[1] ~= "none" then
           local args = {
               [1] = Options[1]
           }
           game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("expressions"):FireServer(unpack(args))
       end
   end,
})
local Dropdown = Tab:CreateDropdown({
   Name = "Wound",
   Options = {"torsoBlood", "noseWound", "neckWound", "mouthBlood", "headWounds"},
   CurrentOption = {"Choose Wound"},
   MultipleOptions = false,
   Flag = "Dropdown1",
   Callback = function(Options)
       if Options[1] ~= "none" then
           local args = {
               [1] = Options[1]
           }
           game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("expressions"):FireServer(unpack(args))
       end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Toggle Debug",
   CurrentValue = false,
   Flag = "Ya",  
   Callback = function(Value)
game.Players.LocalPlayer.PlayerGui.gui.hud.debug.Visible = Value
game.CoreGui.sg123.textr.Visible = Value

-- Emote
local player = game.Players.LocalPlayer
local gui = player:WaitForChild("PlayerGui"):WaitForChild("gui"):WaitForChild("hud"):WaitForChild("debug"):WaitForChild("expressionList")

local expressionsFolder = gui:WaitForChild("expressions")
local statesFolder = gui:WaitForChild("states")
local woundsFolder = gui:WaitForChild("wounds")

local function addButtonEvent(button)
    button.MouseButton1Click:Connect(function()
        local args = {
            [1] = button.Name
        }
        game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("expressions"):FireServer(unpack(args))
    end)
end

local function setupButtons(folder)
    for _, button in pairs(folder:GetChildren()) do
        if button:IsA("TextButton") or button:IsA("ImageButton") then
            addButtonEvent(button)
        end
    end
end

setupButtons(expressionsFolder)
setupButtons(statesFolder)
setupButtons(woundsFolder)
-- Actions
local player = game.Players.LocalPlayer
local actions = player:WaitForChild("PlayerGui"):WaitForChild("gui"):WaitForChild("hud"):WaitForChild("debug"):WaitForChild("actions")
local TweenService = game:GetService("TweenService")
-- reset
local resetButton = actions:WaitForChild("reset")
resetButton.MouseButton1Click:Connect(function()
    local character = player.Character
    if character then
        character:BreakJoints()
        player:LoadCharacter()
    end
end)

-- stunned
local stunnedButton = actions:WaitForChild("stunned")
stunnedButton.MouseButton1Click:Connect(function()
    local args = {
        [1] = "buzzsawHit",
        [2] = workspace:WaitForChild("game"):WaitForChild("currentMap"):WaitForChild("you can't run"):WaitForChild("mechanics"):WaitForChild("buzzsaws"):WaitForChild("20")
    }
    game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("actions"):FireServer(unpack(args))
end)
-- morph
local characterList = game.Players.LocalPlayer.PlayerGui.gui.hud.debug.characterList:GetChildren()

for _, button in pairs(characterList) do
    if button:IsA("TextButton") then
        button.MouseButton1Click:Connect(function()
            local args = {
                [1] = button.Text
            }

            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("morphs"):FireServer(unpack(args))
        end) 
    end
end
end,
})

local isEnabled = false

local Toggle = Tab:CreateToggle({
   Name = "Easy Attack",
   CurrentValue = false,
   Flag = "ToggleEasyAttack", 
   Callback = function(Value)
       isEnabled = Value
   end,
})

spawn(function()
    while true do
        wait()
        if isEnabled then
            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                local args = {
                    [1] = workspace:WaitForChild(player.Name)
                }
                game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("hitReg"):FireServer(unpack(args))
            end
        end
    end
end)

Tab:CreateButton({
Name = "Keep the same morph for the next match\n (Not work in the 3rd match)",
Callback = function()
local player = game.Players.LocalPlayer
local humanoid = player.Character and player.Character:FindFirstChildWhichIsA("Humanoid")

if humanoid then
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
    humanoid.HealthChanged:Connect(function(health)
        if health < 1 then
            humanoid.Health = 9992929292929292929
        end
    end)
end
end,
})

local Tab = Window:CreateTab("Teleport", 0)
Tab:CreateButton({
Name = "Teleport to Lobby",
Callback = function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(0, 10, 0))
end,
})
Tab:CreateButton({
Name = "Teleport to Game (Can fall the void)",
Callback = function()
game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-272, 155, -313))
end,
})
local Tab = Window:CreateTab("Animations", 0)
Tab:CreateButton({
	Name = "Stop animation",
	Callback = function()
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

for _, animationTrack in pairs(humanoid:GetPlayingAnimationTracks()) do
    animationTrack:Stop(0)
end
  	end,    
})

local Animations = {
    { Name = "Sonic.exe 2 Idle", Id = "rbxassetid://137659262960225" },
    { Name = "Tails Cannon", Id = "rbxassetid://138560715967682" },
    { Name = "Tails Glide", Id = "rbxassetid://136705072136812" },
    { Name = "Amy Arm Idle", Id = "rbxassetid://16548210127" },
    { Name = "Cream Heal", Id = "rbxassetid://14472382960" },
    { Name = "Downed 2", Id = "rbxassetid://129121832899238" },
    { Name = "Injured 2", Id = "rbxassetid://116366098474267" },
{ Name = "Beaten", Id = "rbxassetid://14526473340" },
{ Name = "Tackled", Id = "rbxassetid://16233637794" },
{ Name = "knuckles punch 2", Id = "rbxassetid://125567395811973" },
{ Name = "Sonic.exe 2 attack", Id = "rbxassetid://16246380498" },
{ Name = " Sonic.exe 2 Changer 2", Id = "rbxassetid://95255389214022"},
{ Name = "Eggman Test 1", Id = "rbxassetid://74930208619120" },
{ Name = "Eggman Test 2", Id = "rbxassetid://90114877445120" }
}

local function PlayAnimation(animationId)
    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local animator = humanoid:FindFirstChild("Animator") or humanoid:WaitForChild("Animator")
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    local track = animator:LoadAnimation(animation)
    track:Play()
end

for _, anim in ipairs(Animations) do
    Tab:CreateButton({
        Name = anim.Name,
        Callback = function()
            PlayAnimation(anim.Id)
        end
    })
end
local Tab = Window:CreateTab("Innocent", 0)
local Players = game:GetService("Players")
local playerNames = {}
for _, player in pairs(Players:GetPlayers()) do
    table.insert(playerNames, player.Name)
end

local Dropdown = Tab:CreateDropdown({
    Name = "Choose Player To Heal (Need Cream)",
    Options = playerNames,
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        local selectedPlayer = Options[1]
        local args = {
            [1] = "overheal",
            [2] = workspace:WaitForChild(selectedPlayer)
        }
        game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(args))
    end,
})

Players.PlayerAdded:Connect(function(player)
    table.insert(playerNames, player.Name)
    Dropdown:Refresh(playerNames)
end)

Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(playerNames) do
        if name == player.Name then
            table.remove(playerNames, i)
            break
        end
    end
    Dropdown:Refresh(playerNames)
end)
local Players = game:GetService("Players")
local playerNames = {}
for _, player in pairs(Players:GetPlayers()) do
    table.insert(playerNames, player.Name)
end

local Dropdown = Tab:CreateDropdown({
    Name = "Choose Player To Shield (Need Sally)",
    Options = playerNames,
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        local selectedPlayer = Options[1]
        local args = {
            [1] = "shieldShare",
            [2] = workspace:WaitForChild(selectedPlayer)
        }
        game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(args))
    end,
})

Players.PlayerAdded:Connect(function(player)
    table.insert(playerNames, player.Name)
    Dropdown:Refresh(playerNames)
end)

Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(playerNames) do
        if name == player.Name then
            table.remove(playerNames, i)
            break
        end
    end
    Dropdown:Refresh(playerNames)
end)

Tab:CreateButton({
Name = "Dead right now",
Callback = function()
local args = {
    [1] = "drown"
}

game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("actions"):FireServer(unpack(args))
end,
})

loadstring(game:HttpGet("https://rawscripts.net/raw/Sonic.EXE:-The-Disaster-1.3-silver-barrier-spam-READ-DESCRIPTION-27019"))()
local scr = game.Players.LocalPlayer.PlayerGui.ScreenGui
scr.ResetOnSpawn = false
local spam = game.Players.LocalPlayer.PlayerGui.ScreenGui.TextButton
spam.Position = UDim2.new(0, 0, 0.5, -25)
spam.Visible = false
spam.TextSize = 24
spam.TextColor3 = Color3.new(1, 1, 1)
spam.BackgroundColor3 = Color3.new(0, 0, 0)
local corner = Instance.new("UICorner", spam)
corner.CornerRadius = UDim.new(1, 0)
local Toggle = Tab:CreateToggle({
   Name = "Toggle Sliver Spam wall (not mine)",
   CurrentValue = false,
   Flag = "Ya",  
   Callback = function(Value)
spam.Visible = Value
end,
})

local Tab = Window:CreateTab("Sonic.exe and minion", 0)
local teleporting = false
local targetPlayer = nil

local displayPlayers = game:GetService("ReplicatedStorage"):FindFirstChild("displayPlayers")
if not displayPlayers then
    warn("Target: Cannot Found (Fail)")
    return
end

local function getNextPlayerWithHealth()
    for _, playerFolder in ipairs(displayPlayers:GetChildren()) do
        if playerFolder:IsA("Folder") then
            local health = playerFolder:FindFirstChild("health")
            if health and health.Value > 0 then
                local player = game.Players:FindFirstChild(playerFolder.Name)
                if player then
                    return player
                end
            end
        end
    end
    return nil
end

local function teleportToPlayer()
    while teleporting do
        targetPlayer = getNextPlayerWithHealth()
        
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local playerRoot = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local targetRoot = targetPlayer.Character.HumanoidRootPart
            if playerRoot then
                playerRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 2, 0)
            end

            local args = {
                [1] = "attack"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(args))

            local minionArgs = {
                [1] = "minionAttack"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(minionArgs))

            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                local args = {
                    [1] = workspace:WaitForChild(player.Name)
                }
                game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("hitReg"):FireServer(unpack(args))
            end
        end
        wait(0.05)
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Kill All",
    CurrentValue = false,
    Flag = "ToggleKillAll",
    Callback = function(Value)
        teleporting = Value
        if teleporting then
            teleportToPlayer()
        end
    end,
})
local teleporting = false
local targetPlayer = nil
local currentPlayerHealth = 0
local gravityEnabled = false

local displayPlayers = game:GetService("ReplicatedStorage"):FindFirstChild("displayPlayers")
if not displayPlayers then
    warn("Target: Cannot Found (Fail)")
    return
end

local function getNextPlayerWithHealth()
    for _, playerFolder in ipairs(displayPlayers:GetChildren()) do
        if playerFolder:IsA("Folder") then
            local health = playerFolder:FindFirstChild("health")
            if health and health.Value > 0 then
                local player = game.Players:FindFirstChild(playerFolder.Name)
                if player then
                    return player, health.Value
                end
            end
        end
    end
    return nil, 0
end

local function teleportToPlayer()
    while teleporting do
        targetPlayer, currentPlayerHealth = getNextPlayerWithHealth()

        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local playerRoot = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local targetRoot = targetPlayer.Character.HumanoidRootPart
            if playerRoot then
                playerRoot.CFrame = targetRoot.CFrame * CFrame.new(0, -9, 0)
            end

            local args = { [1] = "grab" }
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(args))

            local args = { [1] = "attack" }
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(args))

            local minionArgs = { [1] = "minionAttack" }
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities"):FireServer(unpack(minionArgs))

            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                local args = { [1] = workspace:WaitForChild(player.Name) }
                game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("hitReg"):FireServer(unpack(args))
            end
        end
        task.wait(0)
    end
end

local function setGravity(enabled)
    if enabled then
        workspace.Gravity = 5
    else
        workspace.Gravity = 196.2
    end
end

local Clip = false
local speaker = game.Players.LocalPlayer
local floatName = "FloatPart"
local RunService = game:GetService("RunService")

local Noclipping

local function NoclipLoop()
    if Clip == true and speaker.Character ~= nil then
        for _, child in pairs(speaker.Character:GetDescendants()) do
            if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
                child.CanCollide = false
            end
        end
    else
        for _, child in pairs(speaker.Character:GetDescendants()) do
            if child:IsA("BasePart") and child.Name ~= floatName then
                child.CanCollide = true
            end
        end
    end
end

local Toggle = Tab:CreateToggle({
    Name = "Kill All 2 (Nearly completed, usable now but can be risky)",
    CurrentValue = false,
    Flag = "ToggleKillAll",
    Callback = function(Value)
        teleporting = Value
        if teleporting then
            teleportToPlayer()
        end

        gravityEnabled = not gravityEnabled
        setGravity(gravityEnabled)

        Clip = Value
        if Clip then
            Noclipping = RunService.Stepped:Connect(NoclipLoop)
        else
            if Noclipping then
                Noclipping:Disconnect()
            end
        end
    end,
})

local previousHealth = 0
local function checkHealthChange()
    while teleporting do
        local player, healthValue = getNextPlayerWithHealth()
        if player and healthValue ~= previousHealth and healthValue > 0 then
            previousHealth = healthValue
            teleporting = false

            if healthValue > 0 then
                teleporting = true
                teleportToPlayer()
            end
        end
        task.wait(1)
    end
end

task.spawn(checkHealthChange)
local Tab = Window:CreateTab("Client", 0)

local Input = Tab:CreateInput({
   Name = "Set your health (Client)",
   CurrentValue = "",
   PlaceholderText = "Data",
   Flag = "Input1", 
   Callback = function(setdata)
local playerName = game.Players.LocalPlayer.Name
local newHealthValue = setdata

local replicatedStorage = game:GetService("ReplicatedStorage")
local displayPlayers = replicatedStorage:FindFirstChild("displayPlayers")

if displayPlayers then
    local playerData = displayPlayers:FindFirstChild(playerName)
    if playerData and playerData:FindFirstChild("health") then
        playerData.health.Value = newHealthValue
    end
end
   end,
})
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SkyboxesFolder = ReplicatedStorage:WaitForChild("skyboxes")
local Skyboxes = {}

for _, skybox in ipairs(SkyboxesFolder:GetChildren()) do
    if skybox:IsA("Sky") then
        table.insert(Skyboxes, skybox.Name)
    end
end

local Dropdown = Tab:CreateDropdown({
   Name = "Choose SkyBox",
   Options = Skyboxes,
   CurrentOption = {Skyboxes[1]},
   MultipleOptions = false,
   Flag = "DropdownSkyBox",
   Callback = function(Options)
       for _, skybox in ipairs(SkyboxesFolder:GetChildren()) do
           if skybox.Name == Options[1] then
               local newSky = skybox:Clone()
               newSky.Parent = game.Lighting
               for _, child in ipairs(game.Lighting:GetChildren()) do
                   if child:IsA("Sky") and child ~= newSky then
                       child:Destroy()
                   end
               end
           end
       end
   end,
})

Tab:CreateButton({
Name = "No fog",
Callback = function()
while wait(0.4) do
game.Lighting.atmosphere.Density = 0
game.Lighting.blur.Enabled = false
game.Lighting.bloom.Enabled = false
game.Lighting.colorCorrection.Enabled = false
end
end,
})
local Tab = Window:CreateTab("Misc", 0)
Tab:CreateButton({
Name = "Jump no delay (Mobile)",
Callback = function()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")

local function isGrounded()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        return humanoid:GetState() == Enum.HumanoidStateType.Running or humanoid:GetState() == Enum.HumanoidStateType.Landed
    end
    return false
end

local function removeJumpButton()
    local touchGui = PlayerGui:FindFirstChild("TouchGui")
    if touchGui then
        local touchControlFrame = touchGui:FindFirstChild("TouchControlFrame")
        if touchControlFrame then
            local jumpButton = touchControlFrame:FindFirstChild("JumpButton")
            if jumpButton then
                jumpButton:Destroy()
            end
        end
    end
end

local function createJumpButton()
    local touchGui = PlayerGui:FindFirstChild("TouchGui")
    if touchGui then
        local touchControlFrame = touchGui:FindFirstChild("TouchControlFrame")
        if touchControlFrame then
            local jumpButton = Instance.new("ImageButton")
            jumpButton.Name = "JumpButton"
            jumpButton.Size = UDim2.new(0, 120, 0, 120)
            jumpButton.Position = UDim2.new(1, -150, 1, -150)
            jumpButton.Parent = touchControlFrame
            jumpButton.BackgroundColor3 = Color3.new(0, 0, 0)
            jumpButton.MouseButton1Click:Connect(function()
                if isGrounded() then
                    LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        if isGrounded() then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

removeJumpButton()
createJumpButton()
end,
})

Tab:CreateButton({
Name = "Jump no delay (KeyBoard)",
Callback = function()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local function isGrounded()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        return humanoid:GetState() == Enum.HumanoidStateType.Running or humanoid:GetState() == Enum.HumanoidStateType.Landed
    end
    return false
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        if isGrounded() then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)
end,
})

local running = false 

local Toggle = Tab:CreateToggle({
   Name = "Toggle LaserHit Sound (Spam)",
   CurrentValue = false,
   Flag = "LaserHitToggle",
   Callback = function(Value)
      running = Value 
      if running then
         while running and wait() do
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("actions"):FireServer("laserHit")
         end
      end
   end,
})

Tab:CreateButton({
Name = "One Click laserHit Sound",
Callback = function()
            game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("actions"):FireServer("laserHit")
end,
})

Tab:CreateButton({
Name = "Anti Dead or Stun (PC/Beta)",
Callback = function()
-- LocalScript trong StarterPlayerScripts

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Tốc độ di chuyển
local step = 1 -- Khoảng cách mỗi lần dịch chuyển
local gravitySpeed = 0.5 -- Tốc độ rơi xuống

-- Phát hiện mặt đất
local function isOnGround()
    local rayOrigin = humanoidRootPart.Position
    local rayDirection = Vector3.new(0, -3.5, 0) -- Kiểm tra 2 đơn vị phía dưới
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character} -- Bỏ qua nhân vật
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return raycastResult ~= nil -- Trả về true nếu chạm mặt đất
end

-- Di chuyển nhân vật
local function moveCharacter()
    -- Nếu không chạm đất, tự động rơi
    if not isOnGround() then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -gravitySpeed, 0)
    end
end

-- Lắng nghe sự kiện RenderStepped để cập nhật liên tục
game:GetService("RunService").RenderStepped:Connect(function()
    moveCharacter()
end)

-- Hỗ trợ di chuyển bằng phím W, A, S, D, Space, M
local userInput = game:GetService("UserInputService")
local keysHeld = {
    W = false,
    A = false,
    S = false,
    D = false,
    Space = false,
    M = false
}

userInput.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.W then
        keysHeld.W = true
    elseif input.KeyCode == Enum.KeyCode.S then
        keysHeld.S = true
    elseif input.KeyCode == Enum.KeyCode.A then
        keysHeld.A = true
    elseif input.KeyCode == Enum.KeyCode.D then
        keysHeld.D = true
    elseif input.KeyCode == Enum.KeyCode.Space then
        keysHeld.Space = true
    elseif input.KeyCode == Enum.KeyCode.M then
        keysHeld.M = true
    end
end)

userInput.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then
        keysHeld.W = false
    elseif input.KeyCode == Enum.KeyCode.S then
        keysHeld.S = false
    elseif input.KeyCode == Enum.KeyCode.A then
        keysHeld.A = false
    elseif input.KeyCode == Enum.KeyCode.D then
        keysHeld.D = false
    elseif input.KeyCode == Enum.KeyCode.Space then
        keysHeld.Space = false
    elseif input.KeyCode == Enum.KeyCode.M then
        keysHeld.M = false
    end
end)

-- Di chuyển theo phím nhấn
game:GetService("RunService").RenderStepped:Connect(function()
    if keysHeld.W then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, -step)
    end
    if keysHeld.S then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, step)
    end
    if keysHeld.A then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(-step, 0, 0)
    end
    if keysHeld.D then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(step, 0, 0)
    end
    if keysHeld.Space then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, step, 0)
    end
    if keysHeld.M then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -step, 0)
    end
end)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

humanoidRootPart.Transparency = 0

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local userInputService = game:GetService("UserInputService")
local anchoredState = false

local function toggleAnchored()
    anchoredState = not anchoredState
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = anchoredState
        end
    end
    print(anchoredState and "Anchored: ON" or "Anchored: OFF")
end

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
        toggleAnchored()
    end
end)
end,
})

Tab:CreateButton({
Name = "Anti Dead or Stun (Mobile/Beta)",
Callback = function()

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local step = 1
local gravitySpeed = 0.5 

local buttonsHeld = {
    Up = false,
    Down = false,
    Left = false,
    Right = false,
    Space = false,
    Fall = false
}

local function isOnGround()
    local rayOrigin = humanoidRootPart.Position
    local rayDirection = Vector3.new(0, -3.5, 0)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return raycastResult ~= nil
end

local function moveCharacter()
    if buttonsHeld.Up then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, -step)
    end
    if buttonsHeld.Down then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, 0, step)
    end
    if buttonsHeld.Left then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(-step, 0, 0)
    end
    if buttonsHeld.Right then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(step, 0, 0)
    end
    if buttonsHeld.Space then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, step, 0)
    end
    if buttonsHeld.Fall then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -step, 0)
    end

    if not isOnGround() then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -gravitySpeed, 0)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    moveCharacter()
end)

local screenGui = Instance.new("ScreenGui", player.PlayerGui)
screenGui.Name = "MobileControls"

local function createButton(name, position, size, onPress, onRelease)
    local button = Instance.new("TextButton", screenGui)
    button.Name = name
    button.Size = size
    button.Position = position
    button.Text = name
    button.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
    button.TextColor3 = Color3.new(1, 1, 1)

    button.MouseButton1Down:Connect(onPress)
    button.MouseButton1Up:Connect(onRelease)
end

createButton("Up", UDim2.new(0.4, 0, 0.7, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Up = true end, 
    function() buttonsHeld.Up = false end)

createButton("Down", UDim2.new(0.4, 0, 0.8, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Down = true end, 
    function() buttonsHeld.Down = false end)

createButton("Left", UDim2.new(0.2, 0, 0.8, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Left = true end, 
    function() buttonsHeld.Left = false end)

createButton("Right", UDim2.new(0.6, 0, 0.8, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Right = true end, 
    function() buttonsHeld.Right = false end)

createButton("Space", UDim2.new(0.8, 0, 0.7, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Space = true end, 
    function() buttonsHeld.Space = false end)

createButton("Fall", UDim2.new(0.8, 0, 0.8, 0), UDim2.new(0.2, 0, 0.1, 0), 
    function() buttonsHeld.Fall = true end, 
    function() buttonsHeld.Fall = false end)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

humanoidRootPart.Transparency = 0

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local anchoredState = false

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player:WaitForChild("PlayerGui")

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 200, 0, 50)
button.Position = UDim2.new(0, 0, 0.5, -25)
button.Text = "Toggle Anchored"
button.Parent = screenGui

local function toggleAnchored()
    anchoredState = not anchoredState
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = anchoredState
        end
    end
    button.Text = anchoredState and "Anchored: ON" or "Anchored: OFF"
end

button.MouseButton1Click:Connect(toggleAnchored)

end,
})

if _G.SR then return end
_G.SR = true

local who = game.Players.LocalPlayer

local Notify = game.CoreGui.CallDialogScreen
Notify.Enabled = true 

local settext = game.CoreGui.CallDialogScreen.CallDialog.AlertContents.Footer.Buttons[1].ButtonContent.ButtonMiddleContent.Text
settext.Text = "Close" 
settext.Size = UDim2.new(1, 0, 1, 0)
local intro = game.CoreGui.CallDialogScreen.CallDialog.AlertContents.MiddleContent.Content.BodyText
intro.Text = "Hello " .. who.Name .. " \nVer 1.3 (17/1/2025)\n"
intro.Size = UDim2.new(1, 0, 0, 40)

local close = Instance.new("TextButton", settext)
close.Size = UDim2.new(1, 0, 1, 0)
close.BackgroundTransparency = 1
close.Text = ""
close.MouseButton1Click:Connect(function()
    Notify.Enabled = false
    close:Destroy()
end)

local title = game.CoreGui.CallDialogScreen.CallDialog.AlertContents.TitleContainer.TitleArea.Title
title.Text = "Last updated"
title.Size = UDim2.new(1, 0, 0, 26)

local texts = {"Hello " .. who.Name .. " \nVer 1.31 (17/2/2024)\n", "By ACE1991ACE, ACE1991ACE_ALT, neoxhackbiem(number), bi_6ondo, bi_em6ondo"}
local i = 1

while true do
    intro.Text = texts[i]
    i = i % #texts + 1
    wait(1) 
end
